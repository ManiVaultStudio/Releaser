name: Release ManiVault

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Operating system'
        required: true
        default: 'Windows'
        type: choice
        options:
        - Windows
        - Macos
      version:
        description: 'Application name'
        required: true
        default: 'test'
        type: choice
        options:
        - '1.3'
        - '1.2'
        - '1.1'
        - '1.0'
        - genesurfer
        - test
        - comparison_viewer
        - patchseq_2025_apr
        - cytosplore_viewer
        - valk_2025_april
        - bican_bg
      build-core:
        type: boolean
        default: false
        description: Build core
      build-data-plugins:
        type: boolean
        default: false
        description: Build data plugins
      build-plugins:
        type: boolean
        default: true
        description: Build plugins
      build-installer:
        type: boolean
        description: Build installer
        default: false
      verbose:
        type: boolean
        description: Verbose
        default: true
jobs:
  build-core:
    name: Build core
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Trigger core build workflow
        uses: the-actions-org/workflow-dispatch@v4
        if: ${{ inputs.build-core == true }}
        with:
          workflow: build.yml
          repo: ManiVaultStudio/core
          ref: release/${{ inputs.version }}
          token: ${{ secrets.PA_TOKEN }}
          wait-for-completion: true
          wait-for-completion-timeout: 2h
          display-workflow-run-url: true
          workflow-logs: print
  load-data-plugins-matrix:
    name: Load data plugins matrix
    runs-on: ubuntu-latest
    needs: build-core
    if: ${{ always() && inputs.build-data-plugins == true }}
    continue-on-error: true
    outputs:
      matrix: ${{ steps.extract-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Load data plugins matrix from JSON
        id: extract-matrix
        run: |
          matrix=$(jq -c '.data_plugins' config/${{ inputs.version }}.json)
          echo "Extracted matrix: $matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
  print-data-plugins-matrix:
    name: Print data plugins matrix
    runs-on: ubuntu-latest
    needs: load-data-plugins-matrix
    if: ${{ always() && inputs.verbose == true && needs.load-data-plugins-matrix.outputs.matrix != '[]' }}
    continue-on-error: true
    outputs:
      matrix: ${{ steps.load-data-plugins-matrix.outputs.matrix }}
    steps:
      - name: Print the data plugins matrix output
        run: |
          echo "Data plugins matrix output: ${{ needs.load-data-plugins-matrix.outputs.matrix }}"
  build-data-plugins:
    runs-on: ubuntu-latest
    needs: load-data-plugins-matrix
    if: ${{ always() && inputs.build-data-plugins == true && needs.load-data-plugins-matrix.outputs.matrix != '[]' }}
    continue-on-error: true
    strategy:
      matrix:
        repo: ${{ fromJSON(needs.load-data-plugins-matrix.outputs.matrix) }}
    name: Build - ${{ matrix.repo.name }}
    steps:
      - name: Trigger data plugin build workflow
        uses: the-actions-org/workflow-dispatch@v4
        if: ${{ needs.load-data-plugins-matrix.outputs.matrix != '[]' }}
        with:
          workflow: build.yml
          repo: ManiVaultStudio/${{ matrix.repo.name }}
          ref: ${{ matrix.repo.branch }}
          token: ${{ secrets.PA_TOKEN }}
          wait-for-completion: true
          wait-for-completion-timeout: 2h
          display-workflow-run-url: true
          workflow-logs: print
  load-plugins-matrix:
    name: Load plugins matrix
    runs-on: ubuntu-latest
    needs: build-data-plugins
    if: ${{ always() && inputs.build-plugins == true }}
    continue-on-error: true
    outputs:
      matrix: ${{ steps.extract-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Load plugins matrix from JSON
        id: extract-matrix
        run: |
          matrix=$(jq -c '.plugins' config/${{ inputs.version }}.json)
          echo "Extracted matrix: $matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
  print-plugins-matrix:
    name: Print plugins matrix
    runs-on: ubuntu-latest
    needs: load-plugins-matrix
    if: ${{ always() && inputs.verbose == true && needs.load-plugins-matrix.outputs.matrix != '[]' }}
    continue-on-error: true
    outputs:
      matrix: ${{ steps.load-plugins-matrix.outputs.matrix }}
    steps:
      - name: Print the plugins matrix output
        run: |
          echo "Plugins matrix output: ${{ needs.load-plugins-matrix.outputs.matrix }}"
  build-plugins:
    runs-on: ubuntu-latest
    needs: load-plugins-matrix
    if: ${{ always() && inputs.build-plugins == true }}
    continue-on-error: true
    strategy:
        matrix:
          repo: ${{ fromJSON(needs.load-plugins-matrix.outputs.matrix) }}
    name: Build - ${{ matrix.repo.name }}
    steps:
      - name: Trigger plugin build workflow
        uses: the-actions-org/workflow-dispatch@v4
        with:
          workflow: build.yml
          repo: ManiVaultStudio/${{ matrix.repo.name }}
          ref: ${{ matrix.repo.branch }}
          token: ${{ secrets.PA_TOKEN }}
          wait-for-completion: true
          wait-for-completion-timeout: 2h
          display-workflow-run-url: true
          workflow-logs: print
  load-installer-config:
    name: Load installer configuration
    runs-on: ubuntu-latest
    needs: build-plugins
    if: ${{ always() }}
    continue-on-error: true
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      application_name: ${{ steps.extract-application-name.outputs.application_name }}
      installer_config_json: ${{ steps.generate-installer-config-json.outputs.installer_config_json }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Load installer version from JSON
        id: extract-version
        run: |
          version=$(jq -c '.installer_config.version' config/${{ inputs.version }}.json)
          echo "Extracted installer version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Load installer application name from JSON
        id: extract-application-name
        run: |
          application_name=$(jq -c '.installer_config.application_name' config/${{ inputs.version }}.json)
          echo "Extracted installer application name: $application_name"
          echo "application_name=$application_name" >> $GITHUB_OUTPUT
      - name: Generate installer config JSON
        id: generate-installer-config-json
        run: |
          os="${{ inputs.os }}"
          version="${{ steps.extract-version.outputs.version }}"
          application_name="${{ steps.extract-application-name.outputs.application_name }}"
          
          installer_config_json=$(jq -n \
            --arg os "$os" \
            --arg version "$version" \
            --arg application_name "$application_name" \
            '{ os: $os, version: $version, application_name: $application_name }')
            
          echo "installer_config_json<<EOF" >> $GITHUB_OUTPUT
          echo "$installer_config_json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  print-installer-config:
    name: Print installer configuration
    runs-on: ubuntu-latest
    needs: load-installer-config
    if: ${{ always() && inputs.verbose == true && needs.load-installer-config.outputs.version != '' && needs.load-installer-config.outputs.application_name != '' }}
    continue-on-error: true
    steps:
      - name: Print the installer configuration
        id: print-installer-configuration
        run: |
          echo "Installer configuration: ${{ needs.load-installer-config.outputs.installer_config_json }}"
  build-installer:
    runs-on: ubuntu-latest
    needs: load-installer-config
    if: ${{ always() && inputs.build-installer == true }}
    continue-on-error: true
    name: Build installer
    steps:
      - name: Trigger installer build
        uses: the-actions-org/workflow-dispatch@v4
        if: ${{ inputs.build-installer == true }}
        with:
          workflow: manual.yml
          repo: ManiVaultStudio/Installer
          ref: main
          token: ${{ secrets.PA_TOKEN }}
          wait-for-completion: true
          wait-for-completion-timeout: 2h
          display-workflow-run-url: true
          workflow-logs: print
          inputs: ${{ needs.load-installer-config.outputs.installer_config_json }}
